[{"D:\\year3\\fall\\database\\frontend_2\\src\\index.js":"1","D:\\year3\\fall\\database\\frontend_2\\src\\reportWebVitals.js":"2","D:\\year3\\fall\\database\\frontend_2\\src\\components\\App.js":"3","D:\\year3\\fall\\database\\frontend_2\\src\\components\\Chat.js":"4","D:\\year3\\fall\\database\\frontend_2\\src\\components\\db.js":"5","D:\\year3\\fall\\database\\frontend_2\\src\\components\\MidPane.js":"6","D:\\year3\\fall\\database\\frontend_2\\src\\components\\LeftPane.js":"7","D:\\year3\\fall\\database\\frontend_2\\src\\components\\RightPane.js":"8","D:\\year3\\fall\\database\\frontend_2\\src\\components\\theme.js":"9"},{"size":506,"mtime":1611057732282,"results":"10","hashOfConfig":"11"},{"size":375,"mtime":1609901598332,"results":"12","hashOfConfig":"11"},{"size":23230,"mtime":1611081422647,"results":"13","hashOfConfig":"11"},{"size":426,"mtime":1611046195686,"results":"14","hashOfConfig":"11"},{"size":4178,"mtime":1611067409712,"results":"15","hashOfConfig":"11"},{"size":4572,"mtime":1611081622022,"results":"16","hashOfConfig":"11"},{"size":4404,"mtime":1611079925770,"results":"17","hashOfConfig":"11"},{"size":3376,"mtime":1611065771651,"results":"18","hashOfConfig":"11"},{"size":2917,"mtime":1611068371565,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},"1uh9bxx",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"23"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"23"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"D:\\year3\\fall\\database\\frontend_2\\src\\index.js",["42"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\n// import socketIOClient from \"socket.io-client\";\r\n// const ENDPOINT = \"ws://34.80.122.70:5000/\";\r\n\r\n// const socket = socketIOClient(ENDPOINT);\r\n\r\n\r\n\r\nReactDOM.render(\r\n    \r\n  <App/>\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n\r\n\r\n\r\n{/* <React.StrictMode>\r\n<App socket={socket}/>\r\n</React.StrictMode> */}",["43","44"],"D:\\year3\\fall\\database\\frontend_2\\src\\reportWebVitals.js",[],"D:\\year3\\fall\\database\\frontend_2\\src\\components\\App.js",["45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60"],"import React, {useEffect, useState} from 'react';\r\nimport Chat from \"./Chat\"\r\nimport db from \"./db\"\r\nimport theme_arr from \"./theme\"\r\n\r\n\r\nimport socketIOClient from \"socket.io-client\";\r\nconst ENDPOINT = \"ws://34.80.122.70:5000/\";\r\n\r\nconst socket = socketIOClient(ENDPOINT);\r\n\r\n\r\n\r\nfunction App(props){\r\n    function useLocalStorage(key, initialValue) {\r\n        const [storedValue, setStoredValue] = useState(() => {\r\n          try {\r\n            const item = window.localStorage.getItem(key);\r\n            return item ? JSON.parse(item) : initialValue;\r\n          } \r\n          catch (error) {\r\n            console.log(error);\r\n            return initialValue;\r\n          }\r\n        });\r\n        const setValue = value => {\r\n            try {\r\n                const valueToStore =\r\n                value instanceof Function ? value(storedValue) : value;\r\n                setStoredValue(valueToStore);\r\n                window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n        \r\n            } catch (error) {\r\n            console.log(error);\r\n            }\r\n        };\r\n        return [storedValue, setValue];\r\n    }\r\n\r\n    const [chatRooms, setChatRooms] = useState([])\r\n    const [username, setUsername] = useLocalStorage('name', '');\r\n    const [password, setPassword] = useState(\"\")\r\n    const [cookie, setCookie] = useLocalStorage('cookie', '');\r\n    const [loggedIn, setLoggedIn] = useLocalStorage('loggedIn', false);\r\n    const [selectedChat, setSelectedChat] = useState(\"\");\r\n    const [chatContent, setChatContent] = useState([]);\r\n    const [sendingMessageBody, setSendingMessageBody] = useState(\"\");\r\n    const [leftFilter, setLeftFilter] = useState(\"\");\r\n    const [filteredChatRooms, setFilteredChatRooms] = useState([\"fwef\"])\r\n    const [newMember, setNewMember] = useState(\"\");\r\n    const [emoji, setEmoji] = useState(0);\r\n    const [theme, setTheme] = useState(2);\r\n    const [initialized, setInitialized] = useState(false);\r\n    const [recvMessage, setRecvMessage] = useState(\"\");\r\n    const [recvRoom, setRecvRoom] = useState(\"\");\r\n    const [recvLeave, setRecvLeave] = useState(\"\");\r\n    const [recvJoin, setRecvJoin] = useState(\"\");\r\n    const [recvTitle, setRecvTitle] = useState(\"\");\r\n    const [recvEmojiTheme, setRecvEmojiTheme] = useState(\"\");\r\n    \r\n    \r\n    useEffect(()=>{\r\n        if(!initialized){\r\n            socket.on('connect', (data) => {\r\n                console.log(socket.connected); // true\r\n                console.log(\"connect\")\r\n                console.log(data)\r\n            });\r\n            \r\n            socket.on('invite', (data) =>{\r\n                setRecvRoom(data.chatroom_name)\r\n                socket.emit(\"join\", {chatroom_name: data.chatroom_name})\r\n            })\r\n\r\n            socket.on('member_left', (data)=>{\r\n                console.log(\"member left\")\r\n                setRecvLeave(data)\r\n            })\r\n\r\n            socket.on('new_members', (data)=>{\r\n                console.log(\"member changed\")\r\n                setRecvJoin(data)\r\n            })\r\n            \r\n            socket.on('message', (data) =>{\r\n                console.log(data)\r\n            })\r\n            \r\n            socket.on('new_message', (data) => {\r\n                setRecvMessage(data)\r\n                console.log(data); // true\r\n            })\r\n\r\n            socket.on('chatroom_name_changed', (data) => {\r\n                setRecvTitle(data)\r\n                console.log(data); // true\r\n            })\r\n\r\n            socket.on('emoji_theme_out', (data) => {\r\n                setRecvEmojiTheme(data)\r\n                console.log(data); // true\r\n            })\r\n\r\n            setInitialized(true)\r\n        }\r\n    }, [initialized])\r\n\r\n    useEffect(()=>{\r\n        console.log(\"received message: id, selecetd\")\r\n        console.log(typeof recvMessage.room_id)\r\n        console.log(typeof selectedChat)\r\n        console.log(recvMessage.room_id)\r\n        console.log(selectedChat)\r\n        console.log(chatContent !== undefined)\r\n        console.log(chatContent.messages !== undefined)\r\n        console.log(recvMessage.room_id == selectedChat)\r\n        if(chatContent !== undefined && chatContent.messages !== undefined && recvMessage.room_id == selectedChat){\r\n            console.log(\"adding a new message\")\r\n            var tmpChatContent = Object.assign({}, chatContent);\r\n            tmpChatContent.messages.push(recvMessage)\r\n            setChatContent(tmpChatContent)\r\n        }\r\n\r\n        if(chatRooms !== undefined){\r\n            var i = findIndexFromID(recvMessage.room_id)\r\n            if(i != -1){\r\n                var tmpChatrooms = chatRooms.slice()\r\n                tmpChatrooms[i].last_sender = recvMessage.sender\r\n                tmpChatrooms[i].last_message = recvMessage.body\r\n                tmpChatrooms[i].last_send_date = Date.now()\r\n                \r\n                tmpChatrooms.sort( compare );\r\n\r\n                setChatRooms(tmpChatrooms)\r\n            }\r\n        }\r\n    }, [recvMessage])\r\n\r\n    useEffect(()=>{\r\n        console.log(recvEmojiTheme)\r\n        if(chatContent !== undefined && chatContent.messages !== undefined && selectedChat === recvEmojiTheme.room_id){\r\n            var tmpChatContent = Object.assign({}, chatContent);\r\n            tmpChatContent.emoji = recvEmojiTheme.emoji_index\r\n            tmpChatContent.theme = recvEmojiTheme.theme_index\r\n            setChatContent(tmpChatContent)\r\n        }\r\n    }, [recvEmojiTheme])\r\n\r\n    useEffect(()=>{\r\n        console.log(\"someone leave\")\r\n        console.log(recvLeave)\r\n        if(chatContent !== undefined && chatContent.messages !== undefined && selectedChat === recvLeave.room_id){\r\n            var tmpChatContent = Object.assign({}, chatContent);\r\n            tmpChatContent.people.splice(tmpChatContent.people.indexOf(recvLeave.left_member), 1);\r\n            setChatContent(tmpChatContent)\r\n        }\r\n    }, [recvLeave])\r\n\r\n    useEffect(()=>{\r\n        console.log(\"someone leave\")\r\n        console.log(recvTitle)\r\n        if(selectedChat === recvTitle.room_id){\r\n            var tmpChatContent = Object.assign({}, chatContent);\r\n            tmpChatContent.name = recvTitle.new_name\r\n            setChatContent(tmpChatContent)\r\n        }\r\n        \r\n        var ind = findIndexFromID(recvTitle.room_id)\r\n        if(ind == -1){\r\n            return\r\n        }\r\n        var tmpChatrooms = chatRooms.slice()\r\n        tmpChatrooms[ind].name = recvTitle.new_name\r\n        tmpChatrooms.sort(compare)\r\n        setChatRooms(tmpChatrooms)\r\n\r\n    }, [recvTitle])\r\n\r\n    useEffect(()=>{\r\n        console.log(\"someone join\")\r\n        console.log(recvJoin)\r\n        if(chatContent !== undefined && chatContent.messages !== undefined && selectedChat === recvJoin.room_id){\r\n            var tmpChatContent = Object.assign({}, chatContent);\r\n            tmpChatContent.people = recvJoin.members\r\n            setChatContent(tmpChatContent)\r\n        }\r\n    }, [recvJoin])\r\n\r\n\r\n    useEffect(()=>{\r\n        if(recvRoom === \"\"){\r\n            return\r\n        }\r\n        var formdata = new FormData();\r\n        formdata.append(\"username\", username);\r\n        formdata.append(\"cookie\", cookie);\r\n\r\n        var requestOptions = {\r\n            method: 'POST',\r\n            body: formdata,\r\n            // mode: \"no-cors\",\r\n            redirect: 'follow'\r\n        };\r\n        \r\n        fetch(\"http://34.80.122.70:5000/chatrooms\", requestOptions)\r\n        .then(response => response.text())\r\n        .then(result => {\r\n            \r\n            console.log(\"this is my chatroom list\")\r\n            console.log(result)\r\n            result = JSON.parse(result)\r\n            console.log(\"this is what I got from calling the API\")\r\n            console.log(result)\r\n            var tmpChatroom = result[\"data\"]\r\n            tmpChatroom.sort( compare );\r\n            setChatRooms(tmpChatroom)\r\n        })\r\n        .catch(error => {\r\n            console.log('error', error)\r\n            // alert(\"Can't Connect to Server\")\r\n        });\r\n        \r\n        setRecvRoom(\"\")\r\n    }, [recvRoom])\r\n\r\n\r\n    useEffect(()=>{\r\n        console.log(\"these are chatrooms\")\r\n        console.log(chatRooms)\r\n        for(var i in chatRooms){\r\n            var obj = {chatroom_name: chatRooms[i].name}\r\n            socket.emit('join', obj)\r\n        }\r\n        if(chatRooms.length > 0 && selectedChat === \"\"){\r\n            setSelectedChat(chatRooms[0].id)\r\n        }\r\n\r\n    }, [chatRooms])\r\n\r\n\r\n    const findIndexFromID = (id)=>{\r\n        for(var i = 0; i < chatRooms.length; i++){\r\n            if(id === chatRooms[i].id){\r\n                return i\r\n            }\r\n        }\r\n        return -1\r\n    }\r\n\r\n    \r\n\r\n    const findContentIndexFromChatID = (id)=>{\r\n        for(var i = 0; i < db.sampleChatContents.length; i++){\r\n            if(id === db.sampleChatContents[i].id){\r\n                return i\r\n            }\r\n        }\r\n\r\n        return -1\r\n    }\r\n\r\n    const findNameFromID = (id)=>{\r\n        for(var i = 0; i < chatRooms.length; i++){\r\n            if(id === chatRooms[i].id){\r\n                return chatRooms[i].name\r\n            }\r\n        }\r\n\r\n        return \"\"\r\n    }\r\n\r\n    function compare( a, b ) {\r\n        if ( a.last_send_date > b.last_send_date ){\r\n            return -1;\r\n        }\r\n        if ( a.last_send_date < b.last_send_date ){\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if(selectedChat !== \"\"){\r\n            \r\n            var formdata = new FormData();\r\n            formdata.append(\"username\", username);\r\n            formdata.append(\"cookie\", cookie);\r\n            \r\n\r\n\r\n            var requestOptions = {\r\n                method: 'POST',\r\n                body: formdata,\r\n                // mode: \"no-cors\",\r\n                redirect: 'follow'\r\n            };\r\n            \r\n            fetch(`http://34.80.122.70:5000/chat/${selectedChat}`, requestOptions)\r\n            .then(response => response.text())\r\n            .then(result => {\r\n                console.log(result)\r\n                result = JSON.parse(result)\r\n                console.log(result)\r\n                setChatContent(result)\r\n            })\r\n            .catch(error => {\r\n                console.log('error', error)\r\n                alert(\"Can't Connect to Server\")\r\n            });       \r\n            \r\n            // setChatContent(db.sampleChatContents[findContentIndexFromChatID(selectedChat)])\r\n            \r\n            var tmpChatrooms = chatRooms.slice()\r\n            console.log(\"this is selected:\")\r\n            console.log(selectedChat)\r\n            tmpChatrooms[findIndexFromID(selectedChat)].last_read_date = Date.now();\r\n            tmpChatrooms.sort(compare)\r\n            setChatRooms(tmpChatrooms)\r\n        }\r\n        \r\n\r\n    }, [selectedChat])\r\n\r\n    useEffect(()=>{\r\n        function compare( a, b ) {\r\n            if ( new Date(a.last_send_date).getTime() > new Date(b.last_send_date).getTime() ){\r\n                return -1;\r\n            }\r\n            if ( new Date(a.last_send_date).getTime() < new Date(b.last_send_date).getTime() ){\r\n                return 1;\r\n            }\r\n            return 0;\r\n        }\r\n        if(loggedIn && cookie!==\"\"){\r\n            socket.emit('init', {username: username, cookie: cookie})\r\n            \r\n            var formdata = new FormData();\r\n            formdata.append(\"username\", username);\r\n            formdata.append(\"cookie\", cookie);\r\n\r\n            var requestOptions = {\r\n                method: 'POST',\r\n                body: formdata,\r\n                // mode: \"no-cors\",\r\n                redirect: 'follow'\r\n            };\r\n            \r\n            fetch(\"http://34.80.122.70:5000/chatrooms\", requestOptions)\r\n            .then(response => response.text())\r\n            .then(result => {\r\n                \r\n                console.log(\"this is my chatroom list\")\r\n                console.log(result)\r\n                result = JSON.parse(result)\r\n                \r\n                console.log(\"this is what I got from API\")\r\n                console.log(result)\r\n                var tmpChatroom = result[\"data\"]\r\n                tmpChatroom.sort( compare );\r\n                setChatRooms(tmpChatroom)\r\n            })\r\n            .catch(error => {\r\n                console.log('error', error)\r\n                alert(\"Can't Connect to Server\")\r\n            });\r\n\r\n        }\r\n    }, [loggedIn, cookie])\r\n    \r\n    useEffect(()=>{\r\n        function matchName(indiv_chatroom){\r\n            return indiv_chatroom.name.includes(leftFilter)\r\n        }\r\n        setFilteredChatRooms(chatRooms.filter(matchName))\r\n    }, [chatRooms, leftFilter])\r\n\r\n    useEffect(()=>{\r\n        console.log(\"updated chatConent\")\r\n        console.log(chatContent)\r\n        if(chatContent !== undefined && chatContent.emoji !== undefined){\r\n            setEmoji(chatContent.emoji)\r\n            setTheme(chatContent.theme)\r\n        }\r\n    }, [chatContent])\r\n\r\n    const handleLogin = (evt) => {\r\n        evt.preventDefault();\r\n\r\n\r\n        var formdata = new FormData();\r\n        formdata.append(\"username\", username);\r\n        formdata.append(\"password\", password);\r\n\r\n\r\n        var requestOptions = {\r\n            method: 'POST',\r\n            body: formdata,\r\n            redirect: 'follow'\r\n        };\r\n          \r\n        fetch(\"http://34.80.122.70:5000/login\", requestOptions)\r\n        .then(response => response.text())\r\n        .then(result => {\r\n            result = JSON.parse(result)\r\n            console.log(result)\r\n            if(result.status === \"failed\"){\r\n                alert(\"Login Failed: Username taken\")\r\n                return;\r\n            }\r\n            setLoggedIn(true)\r\n            setCookie(result.cookie)\r\n            setPassword(\"\")\r\n        })\r\n        .catch(error => {\r\n            console.log('error', error)\r\n            alert(\"Can't Connect to Server\")\r\n        });\r\n        \r\n    }\r\n\r\n    const handleLogOut = (evt) =>{\r\n        \r\n        var formdata = new FormData();\r\n        formdata.append(\"username\", username);\r\n        formdata.append(\"cookie\", cookie);\r\n\r\n\r\n        var requestOptions = {\r\n            method: 'POST',\r\n            body: formdata,\r\n            redirect: 'follow'\r\n        };\r\n          \r\n        fetch(\"http://34.80.122.70:5000/logout\", requestOptions)\r\n        .then(response => response.text())\r\n        .then(result => {\r\n            console.log(\"logged out\")\r\n        })\r\n        .catch(error => {\r\n            console.log('error', error)\r\n            // alert(\"Can't Connect to Server\")\r\n        });\r\n\r\n        setLoggedIn(false)\r\n        setCookie(\"\")\r\n        setUsername(\"\")\r\n        setPassword(\"\")\r\n        setChatRooms([])\r\n        setChatContent({})\r\n        setSelectedChat(\"\")\r\n        changeTheme(2, false)\r\n        changeEmoji(0, false)\r\n    }\r\n\r\n    const changeChatRoom = (evt, id) =>{\r\n        // console.log(evt, id)\r\n        setSelectedChat(id)\r\n    }\r\n\r\n    \r\n\r\n    const sendMessage = (msg)=>{\r\n        // alert(`send to backend API ${msg}`);\r\n        if(msg === \"\"){\r\n            return\r\n        }\r\n\r\n        // alert(findNameFromID(selectedChat))\r\n        console.log(\"The chatroom name is:\")\r\n        console.log(findNameFromID(selectedChat))\r\n        socket.emit('message', {username: username, chatroom_name: findNameFromID(selectedChat), content: msg})\r\n\r\n        //date.now\r\n\r\n        setSendingMessageBody(\"\");\r\n    }\r\n\r\n    const setNewTitle = (title)=>{\r\n\r\n        var formdata = new FormData();\r\n        formdata.append(\"username\", username);\r\n        formdata.append(\"cookie\", cookie);\r\n        formdata.append(\"room_id\", selectedChat);\r\n        formdata.append(\"new_chatroom_name\", title)\r\n\r\n        var requestOptions = {\r\n            method: 'POST',\r\n            body: formdata,\r\n            redirect: 'follow'\r\n        };\r\n          \r\n        fetch(\"http://34.80.122.70:5000/change_room_name\", requestOptions)\r\n        .then(response => response.text())\r\n        .then(result => {\r\n            if(result === \"failed\"){\r\n                alert(\"change failed\")\r\n                return\r\n            }\r\n            if(result === \"successful\"){\r\n\r\n            }\r\n        })\r\n        .catch(error => console.log('error', error));\r\n\r\n        // Call backend for update\r\n        // Use the new initialized stuff to change chatContent and change chatList\r\n    }\r\n\r\n    const changeEmoji = (emoji_in, do_emit=true)=>{\r\n        setEmoji(emoji_in)\r\n\r\n        socket.emit(\"emoji_theme\", {chatroom_id: selectedChat, emoji_index: emoji_in, theme_index: theme})\r\n    }\r\n\r\n    const changeTheme = (theme_in, do_emit=true)=>{\r\n        setTheme(theme_in)\r\n        if(do_emit){\r\n            socket.emit(\"emoji_theme\", {chatroom_id: selectedChat, emoji_index: emoji, theme_index: theme_in})\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        var t = theme_arr[theme];  \r\n        \r\n        console.log(t)\r\n        for (const property in t) {\r\n            console.log(`${property}: ${t[property]}`);\r\n            document.documentElement.style.setProperty(\r\n                `${property}`,\r\n                ` ${t[property]}`\r\n            );\r\n        }\r\n    }, [theme])\r\n\r\n    \r\n    const leaveChatRoom = (evt)=>{\r\n        var obj = {username: username, chatroom_name: findNameFromID(selectedChat)}\r\n        socket.emit(\"leave\", obj)\r\n        var tmp = chatRooms.slice()\r\n        tmp.splice(findIndexFromID(selectedChat), 1);\r\n        tmp.sort(compare)\r\n        console.log(tmp)\r\n        setChatRooms(tmp);\r\n        if(tmp.length == 0){\r\n            changeTheme(2, false)\r\n            changeEmoji(0, false)\r\n        }\r\n        setSelectedChat(\"\");\r\n        setChatContent([])\r\n    }\r\n\r\n    const addNewMember = (member, setMemberInput) => {\r\n        console.log(member)\r\n\r\n        var formdata = new FormData();\r\n        formdata.append(\"username\", username);\r\n        formdata.append(\"cookie\", cookie);\r\n        formdata.append(\"chatroom_name\", findNameFromID(selectedChat));\r\n        formdata.append(\"new_member_name\", member)\r\n\r\n        var requestOptions = {\r\n            method: 'POST',\r\n            body: formdata,\r\n            redirect: 'follow'\r\n        };\r\n          \r\n        fetch(\"http://34.80.122.70:5000/add_member\", requestOptions)\r\n        .then(response => response.text())\r\n        .then(result => {\r\n            if(result === \"failed\"){\r\n                alert(\"add member failed\")\r\n                return\r\n            }\r\n            if(result === \"successful\"){\r\n                // alert(\"happy\")\r\n                \r\n                var tmpChatContent = Object.assign({}, chatContent);\r\n                tmpChatContent.people.push(member)\r\n                setChatContent(tmpChatContent)\r\n\r\n            }\r\n        })\r\n        .catch(error => console.log('error', error));\r\n\r\n\r\n        setMemberInput(\"\")\r\n    }\r\n\r\n    const createNewChatroom = (newName, setNewName) => {\r\n\r\n        if(newName === \"\"){\r\n            alert(\"Room Name Cannot be null\")\r\n            return\r\n        }\r\n\r\n        var formdata = new FormData();\r\n        formdata.append(\"username\", username);\r\n        formdata.append(\"cookie\", cookie);\r\n        formdata.append(\"chatroom_name\", newName);\r\n\r\n        var requestOptions = {\r\n            method: 'POST',\r\n            body: formdata,\r\n            redirect: 'follow'\r\n        };\r\n          \r\n        fetch(\"http://34.80.122.70:5000/create_room\", requestOptions)\r\n        .then(response => response.text())\r\n        .then(result => {\r\n            if(result === \"failed\"){\r\n                alert(\"room already exist\")\r\n                console.log(\"room already exist\")\r\n                return\r\n            }\r\n            if(result === \"authentication failed\"){\r\n                // alert(\"weird error\")\r\n                console.log(\"weird error\")\r\n                return\r\n            }\r\n            if(result === \"successful\"){\r\n                formdata = new FormData();\r\n                formdata.append(\"username\", username);\r\n                formdata.append(\"cookie\", cookie);\r\n\r\n                var requestOptions = {\r\n                    method: 'POST',\r\n                    body: formdata,\r\n                    // mode: \"no-cors\",\r\n                    redirect: 'follow'\r\n                };\r\n                \r\n                fetch(\"http://34.80.122.70:5000/chatrooms\", requestOptions)\r\n                .then(response => response.text())\r\n                .then(result => {\r\n                    \r\n                    console.log(\"this is my chatroom list\")\r\n                    console.log(result)\r\n                    result = JSON.parse(result)\r\n                    console.log(\"this is what I got from calling the API\")\r\n                    console.log(result)\r\n                    var tmpChatroom = result[\"data\"]\r\n                    for(var i in tmpChatroom){\r\n\r\n                    }\r\n                    tmpChatroom.sort( compare );\r\n                    setChatRooms(tmpChatroom)\r\n                })\r\n                .catch(error => {\r\n                    console.log('error', error)\r\n                    // alert(\"Can't Connect to Server\")\r\n                });\r\n                \r\n                return\r\n            }\r\n        })\r\n        .catch(error => console.log('error', error));\r\n\r\n        setNewName(\"\")\r\n\r\n        \r\n    }\r\n\r\n    if(!loggedIn){\r\n        return (\r\n        <div className=\"login-background\">\r\n            <div className=\"center-center\">\r\n                <form onSubmit={handleLogin}>\r\n                    <label>\r\n                    <h1 className=\"login-title\"> NTU Chat \r\n                    </h1>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Username\"\r\n                        value={username}\r\n                        onChange={e => setUsername(e.target.value)}\r\n                        className=\"login-input\"\r\n                    />\r\n                    <input\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                        value={password}\r\n                        onChange={e => setPassword(e.target.value)}\r\n                        className=\"login-input\"\r\n                    />\r\n                    </label>\r\n                    <div className=\"button_container\">\r\n                        <input type=\"submit\" value=\"Login / Register\" className=\"login-button\"/>\r\n\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n    else{\r\n        return(\r\n            <div>\r\n                <Chat data={{username: username, cookie: cookie, chatRooms: filteredChatRooms, \r\n                    selectedChat: selectedChat, chatContent: chatContent, sendingMessageBody: sendingMessageBody,\r\n                    leftFilter: leftFilter, newMember: newMember, emoji: emoji}}\r\n                    handlers={{handleLogOut: handleLogOut, setSendingMessageBody: setSendingMessageBody, \r\n                     sendMessage: sendMessage, changeChatRoom: changeChatRoom, setLeftFilter: setLeftFilter,\r\n                     setNewTitle: setNewTitle, leaveChatRoom:leaveChatRoom, setNewMember: setNewMember,\r\n                     addNewMember: addNewMember, createNewChatroom:createNewChatroom, changeEmoji: changeEmoji,\r\n                     changeTheme: changeTheme}}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n  \r\n\r\n\r\nexport default App;","D:\\year3\\fall\\database\\frontend_2\\src\\components\\Chat.js",[],"D:\\year3\\fall\\database\\frontend_2\\src\\components\\db.js",[],"D:\\year3\\fall\\database\\frontend_2\\src\\components\\MidPane.js",[],"D:\\year3\\fall\\database\\frontend_2\\src\\components\\LeftPane.js",["61"],"import React, { useState } from 'react';\r\nimport { faSignOutAlt, faPlus} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport Popup from 'reactjs-popup';\r\n\r\nimport './Chat.css';\r\n\r\nfunction LeftPane(props) {\r\n    const [newRoomName, setNewRoomName] = useState(\"\")\r\n    const msToTime = (millis) =>{\r\n        var seconds = (millis / 1000).toFixed(0);\r\n        var minutes = (seconds / 60).toFixed(0);\r\n        var hours = (minutes / 60).toFixed(0);\r\n        var days = (hours / 24).toFixed(0);\r\n        var weeks = (days / 7).toFixed(0);\r\n        var years = (days / 365).toFixed(0);\r\n\r\n        if(seconds < 60)\r\n            return `${seconds}s`;\r\n        if(minutes < 60)\r\n            return `${minutes}m`;\r\n        if(hours < 24)\r\n            return `${hours}h`;\r\n        if(days < 30)\r\n            return `${days}d`;\r\n        if(weeks < 55)\r\n            return `${weeks}w`;\r\n        return `${years}y`\r\n    }\r\n\r\n    const getLastTime = (lastSendDate) =>{\r\n        var a = msToTime(Number((Date.now()) - new Date(lastSendDate).getTime()))\r\n        return(a)\r\n    }\r\n\r\n    return (\r\n        <div id=\"LeftPaneContainer\">\r\n            <div id=\"LeftTopBarContainer\">\r\n                <div id=\"logo\" className=\"LeftTopBarElement\" onClick={props.handlers.handleLogOut}>\r\n                    <FontAwesomeIcon icon={faSignOutAlt} className=\"logo-icon\"\r\n                    rotation={180}/>\r\n                </div>\r\n                \r\n                <div id=\"AppNameUser\" className=\"LeftTopBarElement\">\r\n                    {props.data.username}\r\n                </div>\r\n\r\n                <Popup trigger={<div id=\"newRoom\" className=\"LeftTopBarElement\">\r\n                    <FontAwesomeIcon icon={faPlus}  className=\"logo-icon\"/>\r\n                </div>} \r\n                modal>\r\n                     {close => (\r\n                        <div className=\"popup\">\r\n                            <a className=\"close\" onClick={close}>\r\n                                &times;\r\n                            </a>\r\n                            <h3> Room Name: </h3>\r\n                            <div className=\"content\">\r\n                            <input\r\n                                className=\"Left-search-input\"\r\n                                placeholder=\"New Room Name\"\r\n                                value={newRoomName}\r\n                                onChange={(e) => setNewRoomName(e.target.value)}\r\n                                onKeyDown={(e) => {\r\n                                    if(e.key === 'Enter'){\r\n                                        props.handlers.createNewChatroom(newRoomName, setNewRoomName);\r\n                                        close();\r\n                                    }\r\n                                }\r\n                            }\r\n                            ></input>\r\n                            </div>\r\n                        </div>\r\n                        )}\r\n                </Popup>\r\n                \r\n            </div>\r\n            \r\n            <input\r\n                className=\"Left-search-input\"\r\n                placeholder=\"Search Rooms\"\r\n                value={props.data.leftFilter}\r\n                onChange={(e) => props.handlers.setLeftFilter(e.target.value)}\r\n            ></input>\r\n            <div id=\"LeftListOfChatRoom\">\r\n                {props.data.chatRooms.map((chatroom)=>(\r\n                    <div key={chatroom.id} className={`LeftIndividualChatRoom ${chatroom.id===props.data.selectedChat? \"selected\" : \"\"} ${chatroom.last_send_date>=chatroom.last_read_date? \"bold\" : \"\"}`}\r\n                    \r\n                    \r\n                    id={chatroom.id} onClick={(e) => {props.handlers.changeChatRoom(e, chatroom.id)}}>\r\n                        <div className=\"Chatroom-list-title\">{chatroom.name} </div>\r\n                        <div className=\"Chatroom-list-content\"> \r\n                            <div className=\"Chatroom-list-sender\">{chatroom.last_sender}:  </div>\r\n                            <div className=\"Chatroom-list-message\">  {chatroom.last_message}</div>\r\n                            <div className=\"Chatroom-list-time\">{getLastTime(chatroom.last_send_date)}</div>\r\n                        \r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\nexport default LeftPane;","D:\\year3\\fall\\database\\frontend_2\\src\\components\\RightPane.js",[],"D:\\year3\\fall\\database\\frontend_2\\src\\components\\theme.js",[],{"ruleId":"62","severity":1,"message":"63","line":26,"column":1,"nodeType":"64","messageId":"65","endLine":28,"endColumn":24},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":116,"column":41,"nodeType":"72","messageId":"73","endLine":116,"endColumn":43},{"ruleId":"70","severity":1,"message":"71","line":117,"column":99,"nodeType":"72","messageId":"73","endLine":117,"endColumn":101},{"ruleId":"70","severity":1,"message":"74","line":126,"column":18,"nodeType":"72","messageId":"73","endLine":126,"endColumn":20},{"ruleId":"75","severity":1,"message":"76","line":137,"column":8,"nodeType":"77","endLine":137,"endColumn":21,"suggestions":"78"},{"ruleId":"75","severity":1,"message":"79","line":147,"column":8,"nodeType":"77","endLine":147,"endColumn":24,"suggestions":"80"},{"ruleId":"75","severity":1,"message":"79","line":157,"column":8,"nodeType":"77","endLine":157,"endColumn":19,"suggestions":"81"},{"ruleId":"70","severity":1,"message":"71","line":169,"column":16,"nodeType":"72","messageId":"73","endLine":169,"endColumn":18},{"ruleId":"75","severity":1,"message":"76","line":177,"column":8,"nodeType":"77","endLine":177,"endColumn":19,"suggestions":"82"},{"ruleId":"75","severity":1,"message":"79","line":187,"column":8,"nodeType":"77","endLine":187,"endColumn":18,"suggestions":"83"},{"ruleId":"75","severity":1,"message":"84","line":224,"column":8,"nodeType":"77","endLine":224,"endColumn":18,"suggestions":"85"},{"ruleId":"75","severity":1,"message":"86","line":238,"column":8,"nodeType":"77","endLine":238,"endColumn":19,"suggestions":"87"},{"ruleId":"88","severity":1,"message":"89","line":252,"column":11,"nodeType":"90","messageId":"91","endLine":252,"endColumn":37},{"ruleId":"75","severity":1,"message":"92","line":322,"column":8,"nodeType":"77","endLine":322,"endColumn":22,"suggestions":"93"},{"ruleId":"75","severity":1,"message":"94","line":368,"column":8,"nodeType":"77","endLine":368,"endColumn":26,"suggestions":"95"},{"ruleId":"70","severity":1,"message":"71","line":544,"column":23,"nodeType":"72","messageId":"73","endLine":544,"endColumn":25},{"ruleId":"88","severity":1,"message":"96","line":642,"column":29,"nodeType":"90","messageId":"91","endLine":642,"endColumn":30},{"ruleId":"97","severity":1,"message":"98","line":54,"column":29,"nodeType":"99","endLine":54,"endColumn":66},"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","no-native-reassign",["100"],"no-negated-in-lhs",["101"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'chatContent', 'chatRooms', 'findIndexFromID', and 'selectedChat'. Either include them or remove the dependency array.","ArrayExpression",["102"],"React Hook useEffect has missing dependencies: 'chatContent' and 'selectedChat'. Either include them or remove the dependency array.",["103"],["104"],["105"],["106"],"React Hook useEffect has missing dependencies: 'cookie' and 'username'. Either include them or remove the dependency array.",["107"],"React Hook useEffect has a missing dependency: 'selectedChat'. Either include it or remove the dependency array.",["108"],"no-unused-vars","'findContentIndexFromChatID' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'chatRooms', 'cookie', 'findIndexFromID', and 'username'. Either include them or remove the dependency array.",["109"],"React Hook useEffect has a missing dependency: 'username'. Either include it or remove the dependency array.",["110"],"'i' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"111","fix":"112"},{"desc":"113","fix":"114"},{"desc":"115","fix":"116"},{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},{"desc":"123","fix":"124"},{"desc":"125","fix":"126"},{"desc":"127","fix":"128"},"Update the dependencies array to be: [chatContent, chatRooms, findIndexFromID, recvMessage, selectedChat]",{"range":"129","text":"130"},"Update the dependencies array to be: [chatContent, recvEmojiTheme, selectedChat]",{"range":"131","text":"132"},"Update the dependencies array to be: [chatContent, recvLeave, selectedChat]",{"range":"133","text":"134"},"Update the dependencies array to be: [chatContent, chatRooms, findIndexFromID, recvTitle, selectedChat]",{"range":"135","text":"136"},"Update the dependencies array to be: [chatContent, recvJoin, selectedChat]",{"range":"137","text":"138"},"Update the dependencies array to be: [cookie, recvRoom, username]",{"range":"139","text":"140"},"Update the dependencies array to be: [chatRooms, selectedChat]",{"range":"141","text":"142"},"Update the dependencies array to be: [chatRooms, cookie, findIndexFromID, selectedChat, username]",{"range":"143","text":"144"},"Update the dependencies array to be: [loggedIn, cookie, username]",{"range":"145","text":"146"},[4952,4965],"[chatContent, chatRooms, findIndexFromID, recvMessage, selectedChat]",[5403,5419],"[chatContent, recvEmojiTheme, selectedChat]",[5859,5870],"[chatContent, recvLeave, selectedChat]",[6489,6500],"[chatContent, chatRooms, findIndexFromID, recvTitle, selectedChat]",[6891,6901],"[chatContent, recvJoin, selectedChat]",[7994,8004],"[cookie, recvRoom, username]",[8373,8384],"[chatRooms, selectedChat]",[10697,10711],"[chatRooms, cookie, findIndexFromID, selectedChat, username]",[12302,12320],"[loggedIn, cookie, username]"]